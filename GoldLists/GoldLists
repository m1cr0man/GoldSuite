--TODO LIST (c) 2014 GoldProgramming
--Csstform
os.loadAPI(shell.resolve("GS/GSAPI"))

local done = false
local x, y
local xmax, ymax
local todo = {}
local themes = {[1]="default",[2]="blue.gst",[3]="dark.gst"}
local input
local theme
local settings
local newTheme



theme = GSAPI.loadTheme()
if theme == "" then
	theme = {[1]="Default",[2]=colors.brown,[3]=colors.lightGray,[4]=colors.yellow,[5]="",[6]=colors.black,[7]=colors.red}
end

xmax, ymax = term.getSize()

--this draws the background of the program
function drawBak()
	theme = GSAPI.loadTheme()
	if theme == "" then
		theme = {[1]="Default",[2]=colors.brown,[3]=colors.lightGray,[4]=colors.yellow,[5]="",[6]=colors.black,[7]=colors.red}
	end
	if theme[1] =="Default" then
		for y=1, ymax do
			term.setBackgroundColor(theme[2])
			term.setCursorPos(1,y)
			term.clearLine()
		end
		for y=3, ymax do
			term.setBackgroundColor(theme[4])
			term.setCursorPos(1,y)
			term.clearLine()
		end
		y = ymax - 2
		for ymax = ymax, y, -1 do
			term.setBackgroundColor(theme[3])
			term.setCursorPos(1,ymax)
			term.clearLine()
		end
	else
		for y=1, ymax do
			term.setBackgroundColor(theme[2])
			term.setCursorPos(1,y)
			term.clearLine()
		end
		for y=3, ymax do
			term.setBackgroundColor(theme[4])
			term.setCursorPos(1,y)
			term.clearLine()
		end
		y = ymax - 2
		for ymax = ymax, y, -1 do
			term.setBackgroundColor(theme[3])
			term.setCursorPos(1,ymax)
			term.clearLine()
		end
	end
end


--check for saved list
if fs.exists("tdl.list") then
	if term.isColor() then
		term.setBackgroundColor(theme[2])
		term.clear()
	end
	print("Would you like to load your previously saved todo list? (y/n)")
	_,input = os.pullEvent("char")
	if input == "y" then
		local file = fs.open("tdl.list", "r")
		local data = file.readAll()
		file.close()
		todo = textutils.unserialize(data)
	else
		--do nothing
	end
end

while done == false do
	term.clear()
	if term.isColor() then
		drawBak()
	end
	term.setCursorPos(1,1)
	if term.isColor() then
		term.setTextColor(theme[7])
	end
	
	if (term.isColor()) then
		term.setBackgroundColor(theme[2])
	end
	print("TODO LIST: ")

	term.setCursorPos(1,3)
	if term.isColor() then
		term.setTextColor(theme[6])
		term.setBackgroundColor(theme[4])
	end
	for i,v in pairs(todo) do
		print(v)
	end
	
	if term.isColor() then
		term.setBackgroundColor(theme[3])
	end
	term.setCursorPos(1,y)
	print("1-9 to add/delete E to exit S for settings")
	_,input = os.pullEvent("char")
	
	if (term.isColor()) then
		term.setBackgroundColor(theme[2])
	end
	if input == "e" then
		break
	elseif input == "s" then
		term.clear()
		term.setCursorPos(1,1)
		print("[1] Save list")
		print("[2] Change theme")
		print("[3] Exit")
		_,input = os.pullEvent("char")

		if input == "1" then
			local file = fs.open("tdl.list", "w")
			file.write(textutils.serialize(todo))
			file.close()
		elseif input == "2" then
			term.clear()
			term.setCursorPos(1,1)
			for i,v in pairs(themes) do
				print("["..i.."]"..v)
			end

			_,input = os.pullEvent("char")

			if input == "1" then
				newTheme = themes[1]
			elseif input == "2" then
				newTheme = themes[2]
			elseif input == "3" then
				newTheme = themes[3]
			elseif input == "4" then
				newTheme = themes[4]
			elseif input == "5" then
				newTheme = themes[5]
			elseif input == "6" then
				newTheme = themes[6]
			elseif input == "7" then
				newTheme = themes[7]
			elseif input == "8" then
				newTheme = themes[8]
			elseif input == "9" then
				newTheme = themes[9]
			end

			settings = {[1]="",[2]=newTheme}

			local file = fs.open("GS/universal.settings", "w")
			if settings[2] == nil then
				settings[2] = "default"
			end
			file.write(textutils.serialize(settings))
			file.close()

		elseif input == "3" then
			--do nothing
		end

		--[[
		local file = fs.open("tdl.list", "w")
		file.write(textutils.serialize(todo))
		file.close()
		]]--
	elseif input == "1" then
		if todo[1] == nil then
			term.clear()
			term.setCursorPos(1,1)
			print("What do you need to do?")
			input = read()
			tostring(input)
			todo[1] = "[1]" .. input
		else
			todo[1] = nil
		end
	elseif input == "2" then
		if todo[2] == nil then
			term.clear()
			term.setCursorPos(1,1)
			print("What do you need to do?")
			input = read()
			tostring(input)
			todo[2] = "[2]" .. input
		else
			todo[2] = nil
		end
	elseif input == "3" then
		if todo[3] == nil then
			term.clear()
			term.setCursorPos(1,1)
			print("What do you need to do?")
			input = read()
			tostring(input)
			todo[3] = "[3]" .. input
		else
			todo[3] = nil
		end
	elseif input == "4" then
		if todo[4] == nil then
			term.clear()
			term.setCursorPos(1,1)
			print("What do you need to do?")
			input = read()
			tostring(input)
			todo[4] = "[4]" .. input
		else
			todo[4] = nil
		end
	elseif input == "5" then
		if todo[5] == nil then
			term.clear()
			term.setCursorPos(1,1)
			print("What do you need to do?")
			input = read()
			tostring(input)
			todo[5] = "[5]" .. input
		else
			todo[5] = nil
		end
	elseif input == "6" then
		if todo[6] == nil then
			term.clear()
			term.setCursorPos(1,1)
			print("What do you need to do?")
			input = read()
			tostring(input)
			todo[6] = "[6]" .. input
		else
			todo[6] = nil
		end
	elseif input == "7" then
		if todo[7] == nil then
			term.clear()
			term.setCursorPos(1,1)
			print("What do you need to do?")
			input = read()
			tostring(input)
			todo[7] = "[7]" .. input
		else
			todo[7] = nil
		end
	elseif input == "8" then
		if todo[8] == nil then
			term.clear()
			term.setCursorPos(1,1)
			print("What do you need to do?")
			input = read()
			tostring(input)
			todo[8] = "[8]" .. input
		else
			todo[8] = nil
		end
	elseif input == "9" then
		if todo[9] == nil then
			term.clear()
			term.setCursorPos(1,1)
			print("What do you need to do?")
			input = read()
			tostring(input)
			todo[9] = "[9]" .. input
		else
			todo[9] = nil
		end
	end				
end

if (term.isColor()) then
	term.setBackgroundColor(colors.black)
	term.setTextColor(colors.white)
end

term.clear()
term.setCursorPos(1,1)